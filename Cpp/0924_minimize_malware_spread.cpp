// https://leetcode.cn/problems/minimize-malware-spread/

class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        vector<int> cc(n, -1), cc_size;
        int cc_idx = -1;
        for (int i = 0; i < n; ++i) {
            if (cc[i] < 0) {
                cc_idx += 1;
                cc[i] = cc_idx;
                int size = 1;
                queue<int> q;
                q.push(i);
                while (!q.empty()) {
                    int cur = q.front();
                    q.pop();
                    for (int node = 0; node < n; ++node) {
                        if (graph[cur][node] == 1 && cc[node] < 0) {
                            cc[node] = cc_idx;
                            size += 1;
                            q.push(node);
                        }
                    }
                }
                cc_size.push_back(size);
            }
        }

        vector<int> num_init_per_cc(cc_size.size(), 0);
        for (int node: initial) {
            num_init_per_cc[cc[node]] += 1;
        }
        int res = n, spread_max = 0, init_min = initial[0];
        for (int node: initial) {
            init_min = min(init_min, node);
            cc_idx = cc[node];
            if (num_init_per_cc[cc_idx] != 1) continue;
            int spread = cc_size[cc_idx];
            if (spread > spread_max || (spread == spread_max && node < res)) {
                res = node;
                spread_max = spread;
            }
        }
        if (res == n) {
            res = init_min;
        }
        return res;
    }
};
