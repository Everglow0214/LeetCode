// https://leetcode.cn/problems/minimize-malware-spread-ii/

class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        int res = n, spread_min = n, init_min = initial[0];
        for (int node: initial) {
            init_min = min(init_min, node);

            for (int i = 0; i < n; ++i) {
                if (graph[node][i] == 1) {
                    graph[node][i] = -1;
                    graph[i][node] = -1;
                }
            }

            int spread = 0;
            vector<int> visited(n, 0);
            for (int mal: initial) {
                if (mal == node) continue;
                queue<int> q;
                q.push(mal);
                if (visited[mal] == 0) {
                    spread += 1;
                    visited[mal] = 1;
                }
                while (!q.empty()) {
                    int cur = q.front();
                    q.pop();
                    for (int i = 0; i < n; ++i) {
                        if (visited[i] == 0 && graph[cur][i] == 1) {
                            q.push(i);
                            spread += 1;
                            visited[i] = 1;
                        }
                    }
                }
            }
            if (spread < spread_min || (spread == spread_min && node < res)) {
                res = node;
                spread_min = spread;
            }

            for (int i = 0; i < n; ++i) {
                if (graph[node][i] == -1) {
                    graph[node][i] = 1;
                    graph[i][node] = 1;
                }
            }
        }

        if (res == n) {
            res = init_min;
        }
        return res;
    }
};
