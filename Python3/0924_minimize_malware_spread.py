# https://leetcode.cn/problems/minimize-malware-spread/

class Solution:
    def minMalwareSpread(self, graph, initial):
        """
        Inputs:
            graph: list[list[int]]
            initial: list[int]
        Outputs:
            res: int
        """
        n = len(graph)
        cc = [-1 for _ in range(n)] # connected component
        cc_idx = -1
        cc_size = []
        for i in range(n):
            if cc[i] < 0:
                size = 1
                cc_idx += 1
                cc[i] = cc_idx
                q = deque()
                q.append(i)
                while q:
                    cur = q.popleft()
                    for node in range(n):
                        if graph[cur][node] == 1 and cc[node] < 0:
                            size += 1
                            cc[node] = cc_idx
                            q.append(node)
                cc_size.append(size)

        num_init_per_cc = defaultdict(int)
        for node in initial:
            num_init_per_cc[cc[node]] += 1

        res, spread_max, init_min = n, 0, initial[0]
        for node in initial:
            init_min = min(init_min, node
            )
            idx = cc[node]
            if num_init_per_cc[idx] != 1:
                continue
            spread = cc_size[idx]
            if spread > spread_max or (spread == spread_max and node < res):
                res = node
                spread_max = spread
        if res == n:
            res = init_min
        return res